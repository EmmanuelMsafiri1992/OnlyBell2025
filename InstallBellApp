#!/bin/bash
# Bell News Professional Installer
# Professional one-command installation for any fresh system

# Colors for professional output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m'

# Configuration
REPO_URL="https://github.com/EmmanuelMsafiri1992/OnlyBell2025.git"
INSTALL_DIR="/opt/bellnews"
LOG_FILE="/tmp/bellnews_install.log"
TEMP_DIR="/tmp/bellnews_setup"

# Initialize log file without redirecting all output
echo "Bell News Professional Installation Started: $(date)" > "$LOG_FILE"

# Professional header
clear
echo -e "${PURPLE}"
echo "████████████████████████████████████████████████████████████"
echo "██                                                        ██"
echo "██                   BELL NEWS INSTALLER                 ██"
echo "██                  Professional Edition                 ██"
echo "██                                                        ██"
echo "████████████████████████████████████████████████████████████"
echo -e "${NC}"
echo
echo -e "${CYAN}🚀 Bell News Professional Installer${NC}"
echo -e "${WHITE}   From fresh system to fully working Bell News in minutes${NC}"
echo
echo -e "${YELLOW}📋 Installation will begin in 3 seconds...${NC}"
sleep 3
echo

# Professional logging functions
print_header() {
    echo
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${WHITE}  $1${NC}"
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo
}

print_step() {
    echo -e "${CYAN}[$(date '+%H:%M:%S')] ${WHITE}$1...${NC}"
    echo "[$(date '+%H:%M:%S')] STEP: $1..." >> "$LOG_FILE"
}

print_success() {
    echo -e "${GREEN}[$(date '+%H:%M:%S')] ✅ $1${NC}"
    echo "[$(date '+%H:%M:%S')] SUCCESS: $1" >> "$LOG_FILE"
}

print_warning() {
    echo -e "${YELLOW}[$(date '+%H:%M:%S')] ⚠️  $1${NC}"
    echo "[$(date '+%H:%M:%S')] WARNING: $1" >> "$LOG_FILE"
}

print_error() {
    echo -e "${RED}[$(date '+%H:%M:%S')] ❌ $1${NC}"
    echo "[$(date '+%H:%M:%S')] ERROR: $1" >> "$LOG_FILE"
}

print_info() {
    echo -e "${BLUE}[$(date '+%H:%M:%S')] ℹ️  $1${NC}"
    echo "[$(date '+%H:%M:%S')] INFO: $1" >> "$LOG_FILE"
}

# Safe execution with professional output
execute_step() {
    local command="$1"
    local description="$2"
    local critical="${3:-false}"

    print_step "$description"

    if eval "$command" >/dev/null 2>&1; then
        print_success "$description completed"
        return 0
    else
        if [[ "$critical" == "true" ]]; then
            print_error "$description failed (critical)"
            return 1
        else
            print_warning "$description failed (continuing)"
            return 0
        fi
    fi
}

# Professional installation progress indicator
show_progress() {
    local current="$1"
    local total="$2"
    local description="$3"

    local percent=$((current * 100 / total))
    local filled=$((percent / 2))
    local empty=$((50 - filled))

    printf "\r${WHITE}Progress: [${GREEN}"
    printf "%0.s█" $(seq 1 $filled)
    printf "${NC}%0.s░" $(seq 1 $empty)
    printf "${WHITE}] ${percent}%% - ${description}${NC}"

    if [[ $current -eq $total ]]; then
        echo
    fi
}

# Check root privileges
check_privileges() {
    if [[ $EUID -ne 0 ]]; then
        echo
        print_error "Administrator privileges required"
        echo -e "${YELLOW}Please run: ${WHITE}sudo ./InstallBellApp${NC}"
        echo
        exit 1
    fi
}

# Comprehensive cleanup function
cleanup_existing_installation() {
    print_header "CLEANING EXISTING INSTALLATION"
    print_step "Scanning system for existing Bell News installations"

    # Stop all Bell News related processes
    print_step "Stopping all Bell News processes and services"
    systemctl stop bellnews 2>/dev/null || true
    systemctl disable bellnews 2>/dev/null || true

    # Kill any running processes
    pkill -f "vcns_timer_web.py" 2>/dev/null || true
    pkill -f "nanopi_monitor.py" 2>/dev/null || true
    pkill -f "nano_web_timer.py" 2>/dev/null || true
    pkill -f "bellnews" 2>/dev/null || true
    sleep 3

    # Remove systemd service files
    print_step "Removing old service configurations"
    rm -f /etc/systemd/system/bellnews.service 2>/dev/null || true
    rm -f /etc/systemd/system/bell-news.service 2>/dev/null || true
    rm -f /etc/systemd/system/vcns-timer.service 2>/dev/null || true
    systemctl daemon-reload 2>/dev/null || true

    # Remove installation directories
    print_step "Removing old installation directories"
    if [[ -d "/opt/bellnews" ]]; then
        print_info "Found existing installation at /opt/bellnews - backing up user data"

        # Backup user data before removal
        mkdir -p /tmp/bellnews_backup 2>/dev/null || true
        cp /opt/bellnews/config.json /tmp/bellnews_backup/ 2>/dev/null || true
        cp /opt/bellnews/alarms.json /tmp/bellnews_backup/ 2>/dev/null || true
        cp /opt/bellnews/users.json /tmp/bellnews_backup/ 2>/dev/null || true

        print_success "User data backed up to /tmp/bellnews_backup"
        rm -rf /opt/bellnews
    fi

    # Remove common alternative installation paths
    rm -rf /home/*/BellNews* 2>/dev/null || true
    rm -rf /home/*/bellnews* 2>/dev/null || true
    rm -rf /opt/BellNews* 2>/dev/null || true
    rm -rf /usr/local/bellnews 2>/dev/null || true

    # Remove log directories
    print_step "Cleaning old log files"
    rm -rf /var/log/bellnews 2>/dev/null || true
    rm -rf /tmp/bellnews* 2>/dev/null || true

    # Remove Python cache and compiled files
    print_step "Cleaning Python cache files"
    find /opt -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
    find /opt -name "*.pyc" -type f -delete 2>/dev/null || true
    find /opt -name "*.pyo" -type f -delete 2>/dev/null || true

    # Clean any old cron jobs or scripts
    print_step "Removing old automation scripts"
    crontab -l 2>/dev/null | grep -v bellnews | crontab - 2>/dev/null || true

    # Remove old network configurations (if any)
    print_step "Cleaning old network backup files"
    rm -rf /opt/*/network_backups 2>/dev/null || true

    # Check for old pygame installations that might conflict
    print_step "Checking for conflicting Python packages"
    python3 -m pip uninstall -y pygame 2>/dev/null || true

    # Remove any old pygame compatibility stubs
    PYTHON_DIRS=(
        "/usr/local/lib/python3.*/site-packages"
        "/usr/lib/python3*/site-packages"
        "/usr/lib/python3/dist-packages"
    )

    for dir_pattern in "${PYTHON_DIRS[@]}"; do
        for dir in $dir_pattern; do
            if [[ -d "$dir" ]]; then
                rm -f "$dir/pygame.py" 2>/dev/null || true
                rm -rf "$dir/pygame" 2>/dev/null || true
                rm -rf "$dir/__pycache__/pygame*" 2>/dev/null || true
            fi
        done
    done

    print_success "System cleaned and ready for fresh installation"
    echo
}

# Main installation function
install_bell_news() {
    local total_steps=11  # Increased to include cleanup step
    local current_step=0

    print_header "BELL NEWS PROFESSIONAL INSTALLATION"

    # Step 0: Cleanup existing installation
    ((current_step++))
    show_progress $current_step $total_steps "Cleaning existing installation"
    cleanup_existing_installation

    # Step 1: System Preparation
    ((current_step++))
    show_progress $current_step $total_steps "Preparing system"
    print_step "Preparing system and updating packages"

    # Stop existing services
    systemctl stop bellnews 2>/dev/null || true
    pkill -f "vcns_timer_web.py" 2>/dev/null || true
    pkill -f "nanopi_monitor.py" 2>/dev/null || true

    # Update system
    execute_step "apt-get update -qq && apt-get upgrade -y -qq" "System update"
    execute_step "apt-get install -y curl wget git unzip python3 python3-pip build-essential -qq" "Essential tools installation"

    print_success "System preparation completed"
    echo

    # Step 2: Python Environment
    ((current_step++))
    show_progress $current_step $total_steps "Setting up Python environment"
    print_step "Installing Python development environment"

    execute_step "apt-get install -y python3-dev python3-setuptools python3-wheel python3-venv -qq" "Python development tools"
    execute_step "python3 -m pip install --upgrade pip --quiet" "Python package manager update"

    print_success "Python environment ready"
    echo

    # Step 3: Repository Download
    ((current_step++))
    show_progress $current_step $total_steps "Downloading Bell News"
    print_step "Downloading Bell News from repository"

    rm -rf "$TEMP_DIR" 2>/dev/null || true
    mkdir -p "$TEMP_DIR"
    cd "$TEMP_DIR"

    if execute_step "git clone $REPO_URL bellnews" "Repository download"; then
        cd bellnews/bellapp
    else
        execute_step "wget -q https://github.com/EmmanuelMsafiri1992/OnlyBell2025/archive/main.zip && unzip -q main.zip && mv OnlyBell2025-main/bellapp ." "Alternative download"
    fi

    print_success "Bell News downloaded successfully"
    echo

    # Step 4: System Dependencies
    ((current_step++))
    show_progress $current_step $total_steps "Installing system dependencies"
    print_step "Installing required system libraries"

    # Install Python packages individually to avoid stopping on single failures
    PYTHON_SYSTEM_PACKAGES=("python3-flask" "python3-psutil" "python3-bcrypt" "python3-yaml" "python3-requests" "python3-pytz")
    for package in "${PYTHON_SYSTEM_PACKAGES[@]}"; do
        execute_step "apt-get install -y $package -qq" "Installing $package"
    done
    execute_step "apt-get install -y libffi-dev libssl-dev libjpeg-dev zlib1g-dev alsa-utils pulseaudio-utils -qq" "Development libraries"
    execute_step "apt-get install -y libsdl2-dev libsdl2-mixer-dev python3-pygame -qq" "Audio system libraries"

    print_success "System dependencies installed"
    echo

    # Step 5: Python Packages
    ((current_step++))
    show_progress $current_step $total_steps "Installing Python packages"
    print_step "Installing Python application packages"

    execute_step "python3 -m pip install flask flask-login requests psutil pytz PyYAML --quiet" "Web framework packages"
    execute_step "python3 -m pip install bcrypt passlib --quiet" "Security packages"

    print_success "Python packages installed"
    echo

    # Step 6: Audio System
    ((current_step++))
    show_progress $current_step $total_steps "Setting up audio system"
    print_step "Configuring audio and multimedia support"

    # Try multiple pygame installation methods
    if ! python3 -c "import pygame; pygame.mixer.init()" 2>/dev/null; then
        execute_step "python3 -m pip install pygame --quiet" "Pygame installation"

        # If still fails, install compatibility system
        if ! python3 -c "import pygame; pygame.mixer.init()" 2>/dev/null; then
            print_info "Installing audio compatibility system"

            # Create compatibility stub
            SITE_PACKAGES=$(python3 -c "import site; print(site.getsitepackages()[0])" 2>/dev/null)

            cat > /tmp/pygame_compat.py << 'EOF'
import os, subprocess, threading, time
class mixer:
    @staticmethod
    def init(*args, **kwargs): return True
    @staticmethod
    def pre_init(*args, **kwargs): return True
    @staticmethod
    def quit(): subprocess.run(['pkill', 'aplay'], capture_output=True)
    @staticmethod
    def get_busy(): return False
    class Sound:
        def __init__(self, path): self.path = str(path)
        def play(self, *args, **kwargs):
            threading.Thread(target=lambda: subprocess.run(['aplay', self.path], capture_output=True), daemon=True).start()
        def stop(self): subprocess.run(['pkill', 'aplay'], capture_output=True)
def init(): return True
def quit(): return True
USEREVENT = 24
QUIT = 256
EOF

            cp /tmp/pygame_compat.py "$SITE_PACKAGES/pygame.py" 2>/dev/null || true
            rm /tmp/pygame_compat.py
        fi
    fi

    print_success "Audio system configured"
    echo

    # Step 7: Application Installation
    ((current_step++))
    show_progress $current_step $total_steps "Installing Bell News application"
    print_step "Installing Bell News application files"

    # Create directories
    execute_step "mkdir -p $INSTALL_DIR $INSTALL_DIR/static/audio $INSTALL_DIR/templates $INSTALL_DIR/logs $INSTALL_DIR/network_backups /var/log/bellnews" "Directory creation"

    # Copy application files
    execute_step "cp -r * $INSTALL_DIR/" "Application files copy"
    execute_step "chown -R root:root $INSTALL_DIR && chmod -R 755 $INSTALL_DIR && chmod +x $INSTALL_DIR/*.py $INSTALL_DIR/*.sh" "Permission setup"
    execute_step "chmod 777 $INSTALL_DIR/logs && chmod 666 $INSTALL_DIR/*.json" "Configuration permissions"

    # Ensure proper configuration files
    echo '[]' > "$INSTALL_DIR/alarms.json" 2>/dev/null || true
    [[ ! -f "$INSTALL_DIR/config.json" ]] && echo '{}' > "$INSTALL_DIR/config.json"

    print_success "Bell News application installed"
    echo

    # Step 8: Service Configuration
    ((current_step++))
    show_progress $current_step $total_steps "Configuring system service"
    print_step "Setting up automatic startup service"

    # Create systemd service
    cat > /etc/systemd/system/bellnews.service << 'EOF'
[Unit]
Description=Bell News System
After=network.target
Wants=network.target

[Service]
Type=exec
User=root
WorkingDirectory=/opt/bellnews
Environment=PYTHONUNBUFFERED=1
ExecStart=/usr/bin/python3 /opt/bellnews/vcns_timer_web.py
Restart=always
RestartSec=10
StandardOutput=append:/var/log/bellnews/service.log
StandardError=append:/var/log/bellnews/error.log

[Install]
WantedBy=multi-user.target
EOF

    execute_step "systemctl daemon-reload && systemctl enable bellnews" "Service configuration"

    print_success "System service configured"
    echo

    # Step 9: System Testing
    ((current_step++))
    show_progress $current_step $total_steps "Testing installation"
    print_step "Verifying installation integrity"

    # Test critical components
    cd "$INSTALL_DIR"

    if python3 -c "import vcns_timer_web" 2>/dev/null; then
        print_success "Main application test passed"
    else
        print_warning "Main application test inconclusive"
    fi

    if python3 -c "from network_manager import NetworkManager" 2>/dev/null; then
        print_success "Network manager test passed"
    else
        print_warning "Network manager test inconclusive"
    fi

    if python3 -c "import pygame; pygame.mixer.init()" 2>/dev/null; then
        print_success "Audio system test passed"
    else
        print_info "Audio system using compatibility mode"
    fi

    print_success "Installation testing completed"
    echo

    # Step 10: Service Startup
    ((current_step++))
    show_progress $current_step $total_steps "Starting Bell News service"
    print_step "Starting Bell News system service"

    execute_step "systemctl start bellnews" "Service startup"
    sleep 10

    # Verify service
    if systemctl is-active bellnews >/dev/null 2>&1; then
        print_success "Bell News service is running"
    else
        print_warning "Service may need additional startup time"
    fi

    # Test web interface
    if curl -s -m 10 http://localhost:5000 >/dev/null 2>&1; then
        print_success "Web interface is accessible"
    else
        print_info "Web interface may need additional initialization time"
    fi

    print_success "Service startup completed"
    echo

    # Restore user data if backup exists
    restore_user_data
}

# Restore user data from backup
restore_user_data() {
    if [[ -d "/tmp/bellnews_backup" ]]; then
        print_step "Restoring previous user data"

        # Stop service temporarily for data restoration
        systemctl stop bellnews 2>/dev/null || true
        sleep 2

        # Restore configuration files
        if [[ -f "/tmp/bellnews_backup/config.json" ]]; then
            cp /tmp/bellnews_backup/config.json "$INSTALL_DIR/" 2>/dev/null || true
            print_success "Configuration restored"
        fi

        if [[ -f "/tmp/bellnews_backup/alarms.json" ]]; then
            cp /tmp/bellnews_backup/alarms.json "$INSTALL_DIR/" 2>/dev/null || true
            print_success "Alarms restored"
        fi

        if [[ -f "/tmp/bellnews_backup/users.json" ]]; then
            cp /tmp/bellnews_backup/users.json "$INSTALL_DIR/" 2>/dev/null || true
            print_success "User accounts restored"
        fi

        # Fix permissions
        chown root:root "$INSTALL_DIR"/*.json 2>/dev/null || true
        chmod 666 "$INSTALL_DIR"/*.json 2>/dev/null || true

        # Restart service with restored data
        systemctl start bellnews 2>/dev/null || true
        sleep 3

        # Cleanup backup
        rm -rf /tmp/bellnews_backup 2>/dev/null || true

        print_success "Previous user data restored successfully"
        echo
    fi
}

# Installation completion
show_completion() {
    local ip_address
    ip_address=$(ip addr show | grep "inet " | grep -v 127.0.0.1 | head -1 | awk '{print $2}' | cut -d'/' -f1 2>/dev/null || echo "localhost")

    echo
    echo -e "${GREEN}"
    echo "████████████████████████████████████████████████████████████"
    echo "██                                                        ██"
    echo "██              INSTALLATION SUCCESSFUL! ✅              ██"
    echo "██                                                        ██"
    echo "████████████████████████████████████████████████████████████"
    echo -e "${NC}"
    echo
    echo -e "${WHITE}🎉 Bell News has been successfully installed!${NC}"
    echo
    echo -e "${CYAN}📱 ACCESS YOUR SYSTEM:${NC}"
    echo -e "   ${WHITE}• Web Interface: ${GREEN}http://$ip_address:5000${NC}"
    echo -e "   ${WHITE}• Local Access:  ${GREEN}http://localhost:5000${NC}"
    echo
    echo -e "${CYAN}🔧 SYSTEM MANAGEMENT:${NC}"
    echo -e "   ${WHITE}• Service Status: ${YELLOW}sudo systemctl status bellnews${NC}"
    echo -e "   ${WHITE}• Restart:        ${YELLOW}sudo systemctl restart bellnews${NC}"
    echo -e "   ${WHITE}• View Logs:      ${YELLOW}sudo journalctl -u bellnews -f${NC}"
    echo
    echo -e "${CYAN}🔄 FUTURE UPDATES:${NC}"
    echo -e "   ${WHITE}• Update Command: ${YELLOW}cd $INSTALL_DIR && git pull && sudo ./update_system.sh${NC}"
    echo
    echo -e "${CYAN}📋 FEATURES READY:${NC}"
    echo -e "   ${WHITE}• ✅ Web interface with secure authentication${NC}"
    echo -e "   ${WHITE}• ✅ Network configuration (static/dynamic IP)${NC}"
    echo -e "   ${WHITE}• ✅ Time management and NTP synchronization${NC}"
    echo -e "   ${WHITE}• ✅ Alarm and timer system with audio alerts${NC}"
    echo -e "   ${WHITE}• ✅ System monitoring and hardware status${NC}"
    echo -e "   ${WHITE}• ✅ User management and access control${NC}"
    echo
    echo -e "${GREEN}🚀 Your Bell News system is ready for use!${NC}"
    echo -e "${BLUE}📝 Installation log saved to: $LOG_FILE${NC}"
    echo

    # Save installation info
    cat > "$INSTALL_DIR/INSTALLATION_INFO.txt" << EOF
Bell News Installation Complete
==============================

Installation Date: $(date)
System: $(uname -a)
Python Version: $(python3 --version)
Installation Directory: $INSTALL_DIR
Access URL: http://$ip_address:5000

Installation Log: $LOG_FILE

Service Commands:
- Status: sudo systemctl status bellnews
- Restart: sudo systemctl restart bellnews
- Logs: sudo journalctl -u bellnews -f

For updates: cd $INSTALL_DIR && git pull && sudo ./update_system.sh

Bell News is now fully operational!
EOF
}

# Cleanup temporary files
cleanup() {
    rm -rf "$TEMP_DIR" 2>/dev/null || true
}

# Main execution
main() {
    # Check privileges
    check_privileges

    # Run installation
    install_bell_news

    # Show completion
    show_completion

    # Cleanup
    cleanup
}

# Execute main function
main "$@"